local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameData = ReplicatedStorage:WaitForChild("GameData")
local Floor = GameData:WaitForChild("Floor")
local Fools = Floor.Value == "Fools"
local Hotel = Floor.Value == "Hotel"
local Rooms = Floor.Value == "Rooms"
local Mines = Floor.Value == "Mines"
local Retro = Floor.Value == "Retro"
local Rooms = Floor.Value == "Rooms"
local Backdoor = Floor.Value == "Backdoor"
if Fools then
RemotesFolder = ReplicatedStorage.EntityInfo
else
RemotesFolder = ReplicatedStorage.RemotesFolder
end
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
	Title = "YOUHUB | DOORS",
	Footer = "BETA v0.0.2",
	Icon = 95869322194132,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
  Main = Window:AddTab("Main"),
  Players = Window:AddTab("Players"),
  Exploits = Window:AddTab("Exploits"),
  Visual = Window:AddTab("Visual"),
  Settings = Window:AddTab("Settings"),
}
local Fast = Tabs.Main:AddLeftGroupbox("Fast")
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.FastDoors then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door"):SetAttribute("FastOpen", true)
end 
end)
end)
Fast:AddToggle("MyToggle",{
Text = "Doors Fast",
Default = false,
Callback = function(v)
_G.FastDoors = v
end})
local Reach = Tabs.Main:AddRightGroupbox("Reach")
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.DoorsReach then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door").ClientOpen:FireServer()
end 
end)
end)
Reach:AddToggle("MyToggle",{
Text = "Doors Reach",
Default = false,
Callback = function(v)
_G.DoorsReach = v
end})
Reach:AddToggle("MyToggle",{
Text = "Reach",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 15
end
end
IncreasedDistance = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 15
end
end
end)
else
IncreasedDistance:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 8
end
end
end
end})
local Interact = Tabs.Main:AddLeftGroupbox("Interact")
Interact:AddToggle("MyToggle",{
Text = "Through Interact",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
ThroughInteract = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
end)
else
ThroughInteract:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = true
end
end
end
end})
Interact:AddToggle("MyToggle",{
Text = "Instance Interact",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
InstanceInteract = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
end)
else
InstanceInteract:Disconnect()
end
end})
shared = {
    Character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait(),
    LocalPlayer = game.Players.LocalPlayer,
    Humanoid = nil,
}

local function InitializeScript()
    shared.Humanoid = shared.Character:WaitForChild("Humanoid")
    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        shared.Character = char
        shared.Humanoid = char:WaitForChild("Humanoid")
    end)
end

shared.fireproximityprompt = function(prompt)
    if prompt.ClassName == "ProximityPrompt" then
        fireproximityprompt(prompt)
    end
end

local Script = {
    PromptTable = {
        GamePrompts = {},
        Aura = {
            ["ActivateEventPrompt"] = false,
            ["AwesomePrompt"] = true,
            ["FusesPrompt"] = true,
            ["HerbPrompt"] = false,
            ["LeverPrompt"] = true,
            ["LootPrompt"] = false,
            ["ModulePrompt"] = true,
            ["SkullPrompt"] = false,
            ["UnlockPrompt"] = true,
            ["ValvePrompt"] = false,
            ["PropPrompt"] = true
        },
        AuraObjects = {
            "Lock",
            "Button"
        },
        Clip = {
            "AwesomePrompt",
            "FusesPrompt",
            "HerbPrompt",
            "HidePrompt",
            "LeverPrompt",
            "LootPrompt",
            "ModulePrompt",
            "Prompt",
            "PushPrompt",
            "SkullPrompt",
            "UnlockPrompt",
            "ValvePrompt"
        },
        ClipObjects = {
            "LeverForGate",
            "LiveBreakerPolePickup",
            "LiveHintBook",
            "Button",
        },
        Excluded = {
            Prompt = {
                "HintPrompt",
                "InteractPrompt"
            },
            Parent = {
                "KeyObtainFake",
                "Padlock"
            },
            ModelAncestor = {
                "DoorFake"
            }
        }
    },
    Temp = {
        PaintingDebounce = {}
    }
}

Script.Functions = {
    GetAllPromptsWithCondition = function(condition)
        local prompts = {}
        for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                if condition(v) then
                    table.insert(prompts, v)
                end
            end
        end
        return prompts
    end,

    DistanceFromCharacter = function(object)
        if not shared.Character or not shared.Character:FindFirstChild("HumanoidRootPart") or not object then
            return math.huge
        end
        local objectPosition = object:IsA("BasePart") and object.Position or 
                             object:FindFirstChild("HumanoidRootPart") and object.HumanoidRootPart.Position or
                             object:FindFirstChildWhichIsA("BasePart") and object:FindFirstChildWhichIsA("BasePart").Position
        if not objectPosition then
            return math.huge
        end
        return (shared.Character.HumanoidRootPart.Position - objectPosition).Magnitude
    end,
    
    IsExcluded = function(prompt)
        for _, excludedName in ipairs(Script.PromptTable.Excluded.Prompt) do
            if prompt.Name == excludedName then return true end
        end
        if prompt.Parent then
            for _, excludedParent in ipairs(Script.PromptTable.Excluded.Parent) do
                if prompt.Parent.Name == excludedParent then return true end
            end
        end
        local model = prompt:FindFirstAncestorWhichIsA("Model")
        if model then
            for _, excludedModel in ipairs(Script.PromptTable.Excluded.ModelAncestor) do
                if model.Name == excludedModel then return true end
            end
        end
        return false
    end
}

local AutoInteractEnabled = false
local IgnoreSettings = {
    ["Jeff Items"] = true,
    ["Unlock Lockpick"] = false,
    ["Paintings"] = true,
    ["Gold"] = false,
    ["Light Source Items"] = false,
    ["Skull Prompt"] = false
}
Interact:AddDivider()
Interact:AddToggle("Auto-interact", {
	Text = "Auto Interact",
	Default = false,
	Callback = function(v)
        _G.AutoInteractEnabled = v
end}):AddKeyPicker("AutoInteractKeybind", {
   Default = "R",
   Text = "Auto Interact",
   Mode = Library.IsMobile and "Toggle" or "Hold",
   SyncToggleState = Library.IsMobile
})

Interact:AddDropdown("Auto-interact-drop", {
	Values = {"Jeff Items", "Unlock Lockpick", "Paintings", "Gold", "Light Source Items", "Skull Prompt"},
	Default = 1,
	Multi = true,
	Text = "Ignore list",
	Searchable = false,
	Callback = function(v)
        for k, _ in pairs(IgnoreSettings) do
            IgnoreSettings[k] = false
        end
        for _, v in pairs(v) do
            IgnoreSettings[v] = true
			end
	end,
	Disabled = false,
	Visible = true, 
})
local function AutoInteractLoop()
    while true do wait(0.1)
        task.wait(0.1)
        if _G.AutoInteractEnabled then
            local prompts = Script.Functions.GetAllPromptsWithCondition(function(prompt)
                if not prompt.Parent then return false end
                if IgnoreSettings["Jeff Items"] and prompt.Parent:GetAttribute("JeffShop") then return false end
                if IgnoreSettings["Unlock Lockpick"] and (prompt.Name == "UnlockPrompt" or prompt.Parent:GetAttribute("Locked")) and shared.Character:FindFirstChild("Lockpick") then return false end
                if IgnoreSettings["Paintings"] and prompt.Name == "PropPrompt" then return false end
                if IgnoreSettings["Gold"] and prompt.Name == "LootPrompt" then return false end
                if IgnoreSettings["Light Source Items"] and prompt.Parent:GetAttribute("Tool_LightSource") and not prompt.Parent:GetAttribute("Tool_CanCutVines") then return false end
                if IgnoreSettings["Skull Prompt"] and prompt.Name == "SkullPrompt" then return false end
                if prompt.Parent:GetAttribute("PropType") == "Battery" and not (shared.Character:FindFirstChildOfClass("Tool") and (shared.Character:FindFirstChildOfClass("Tool"):GetAttribute("RechargeProp") == "Battery" or shared.Character:FindFirstChildOfClass("Tool"):GetAttribute("StorageProp") == "Battery")) then return false end 
                if prompt.Parent:GetAttribute("PropType") == "Heal" and shared.Humanoid and shared.Humanoid.Health == shared.Humanoid.MaxHealth then return false end
                if prompt.Parent.Name == "MinesAnchor" then return false end
                if Script.IsRetro and prompt.Parent.Parent.Name == "RetroWardrobe" then return false end
                return Script.PromptTable.Aura[prompt.Name] ~= nil
            end)

            for _, prompt in pairs(prompts) do
                task.spawn(function()
                    if Script.Functions.DistanceFromCharacter(prompt.Parent) < prompt.MaxActivationDistance and (not prompt:GetAttribute("Interactions" .. shared.LocalPlayer.Name) or Script.PromptTable.Aura[prompt.Name] or table.find(Script.PromptTable.AuraObjects, prompt.Parent.Name)) then
                        if prompt.Parent.Name == "Slot" and prompt.Parent:GetAttribute("Hint") then
                            if Script.Temp.PaintingDebounce[prompt] then return end
                            local currentPainting = shared.Character:FindFirstChild("Prop")
                            local slotPainting = prompt.Parent:FindFirstChild("Prop")
                            local currentHint = (currentPainting and currentPainting:GetAttribute("Hint"))
                            local slotHint = (slotPainting and slotPainting:GetAttribute("Hint"))
                            local promptHint = prompt.Parent:GetAttribute("Hint")
                            if slotHint ~= promptHint and (currentHint == promptHint or slotPainting) then
                                Script.Temp.PaintingDebounce[prompt] = true
                                shared.fireproximityprompt(prompt)
                                task.wait(0.3)
                                Script.Temp.PaintingDebounce[prompt] = false    
                            end
                            return
                        end
                        shared.fireproximityprompt(prompt)
                    end
                end)
            end
        end
    end
end
InitializeScript()
task.spawn(AutoInteractLoop)
local Automation = Tabs.Main:AddRightGroupbox("Automation")
Automation:AddToggle("MyToggle",{
Text = "Auto Breaker",
Default = false,
Callback = function(v)
_G.AutoBreaker = v
while _G.AutoBreaker do wait(1)
if _G.AutoBreaker then
RemotesFolder.EBF:FireServer()
end
end
end})
Automation:AddToggle("MyToggle",{
Text = "Auto Padlock Unlock",
Default = false,
Callback = function(v)
_G.AutoPadlockUnlock = v
while _G.AutoPadlockUnlock do wait(0.5)
        for _, player in pairs(game.Players:GetPlayers()) do
            if not player.Character then continue end
            local tool = player.Character:FindFirstChildOfClass("Tool")

            if tool and tool.Name:match("LibraryHintPaper") then
                local code = tool:FindFirstChild("Code") and tool.Code.Value or nil
                local padlock = workspace:FindFirstChild("Padlock", true)

                if tonumber(code) and (padlock.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.PadlockUnlockDistance or 50 then
                    firetouchinterest(padlock, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
                    firetouchinterest(padlock, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
                end
            end
        end
    end
end})
Automation:AddDivider()
Automation:AddSlider("MySlider",{
Text = "Unlock Distance",
Default = 50,
Min = 50,
Max = 200,
Rounding = 2,
Compact = true,
Callback = function(v)
_G.PadlockUnlockDistance = v
end})
local World = Tabs.Main:AddLeftGroupbox("World")
game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(function()
if _G.ClosetsExitFix and game.Players.LocalPlayer.Character:GetAttribute("Hiding")==true then 
RemotesFolder.CamLock:FireServer()
end 
end)
World:AddToggle("MyToggle",{
Text = "Closets Exit Fix",
Default = false,
Callback = function(v)
_G.ClosetsExitFix = v
end})
if Retro then
World:AddToggle("MyToggle",{
Text = "Blur Fake Brigde",
Default = false,
Callback = function(v)
_G.BlurFakeBridge = v
if _G.BlurFakeBridge then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.9
end
end
BlurFakeBridge = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.75
end
end
end)
else
BlurFakeBridge:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0
end
end
end
end})
end
World:AddToggle("MyToggle",{
Text = "Hiding Live Sanity",
Default = false,
Callback = function(v)
_G.NoLiveSanity = v
while _G.NoLiveSanity do wait(1)
for _,v in workspace.CurrentCamera:GetChildren() do
if v.Name == "LiveSanity" and workspace:FindFirstChild("EntityModel") then
v.Enabled = not _G.NoLiveSanity
end
end
end
end})
World:AddToggle("MyToggle",{
Text = "Hiding Void Roblox",
Default = false,
Callback = function(v)
if v then
workspace.FallenPartsDestroyHeight = 0 / 0
else
workspace.FallenPartsDestroyHeight = -50000
end
end})
World:AddToggle("MyToggle",{
Text = "No Hiding Vignette",
Default = false,
Callback = function(v)
task.spawn(function()
while wait(0.1) do
local vignette = game:GetService("Players").LocalPlayer.PlayerGui.MainUI.MainFrame.HideVignette
        if v then
            vignette.Size = UDim2.new(0,0,0,0)
        else
            vignette.Size = UDim2.new(1,0,1,0)
        end
      end
   end)
end})
local Misc = Tabs.Main:AddRightGroupbox("Misc")
Misc:AddButton({
Text = "Lobby",
DoubleClick = true,
Func = function()
RemotesFolder.Lobby:FireServer()
end})
Misc:AddButton({
Text = "Revive",
DoubleClick = true,
Func = function()
RemotesFolder.Revive:FireServer()
end})
Misc:AddButton({
Text = "Exit",
DoubleClick = true,
Func = function()
game:Shutdown()
end})
Misc:AddButton({
Text = "Play Again",
DoubleClick = true,
Func = function()
RemotesFolder.PlayAgain:FireServer()
end})
Misc:AddButton({
Text = "Reset Character",
DoubleClick = true,
Func = function()
game.Players.LocalPlayer.Character.Humanoid.Health = 0
end})


local Players = Tabs.Players:AddLeftGroupbox("Players")
Players:AddSlider("MySlider",{
Text = "Speed Boost",
Min = 15,
Default = 15,
Max = 50,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.SpeedBoost = v
end})
Players:AddToggle("MyToggle",{
Text = "Speed Boost",
Default = false,
Callback = function(v)
_G.EnabledSpeed = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledSpeed and not _G.SeekSpeed then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.SpeedBoost or 17
game.Players.LocalPlayer.Character:SetAttribute("SpeedBoost", 1)
else
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 17
game.Players.LocalPlayer.Character:SetAttribute("SpeedBoost", 0)
end
end)
end})
Players:AddSlider("Speed Fly", {
    Text = "Speed Fly",
    Default = 16,
    Min = 16,
    Max = 50,
    Rounding = 0,
    Compact = true,
    Callback = function(v)
_G.SetSpeedFly = v
end})
_G.SetSpeedFly = 16
LocalPlayer:AddToggle("StFly", {
    Text = "Fly",
    Default = false,
    Callback = function(v)
_G.StartFly = v
if _G.StartFly == false then
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler:Destroy()
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler:Destroy()
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
end
end
task.spawn(function()
while _G.StartFly do
if not _G.SeekSpeed then
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.CFrame = Workspace.CurrentCamera.CoordinateFrame
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SetSpeedFly)
end
elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") == nil and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") == nil then
local bv = Instance.new("BodyVelocity")
local bg = Instance.new("BodyGyro")

bv.Name = "VelocityHandler"
bv.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bv.MaxForce = Vector3.new(0,0,0)
bv.Velocity = Vector3.new(0,0,0)

bg.Name = "GyroHandler"
bg.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bg.MaxTorque = Vector3.new(0,0,0)
bg.P = 1000
bg.D = 50
end
task.wait()
end
end
end)
end}):AddKeyPicker("Fly", {
   Default = "F",
   Text = "Fly",
   Mode = Library.IsMobile and "Toggle" or "Hold",
   SyncToggleState = Library.IsMobile
})
Players:AddToggle("MyToggle",{
Text = "Flight,Speed Offtion",
Default = false,
Callback = function(v)
_G.SeekSpeed = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.SeekSpeed then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20.5
end
end)
end}):AddKeyPicker("SeekSpeed", {
    Default = "Q",
    Text = "Flight,Speed Offtion",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})
Players:AddDivider()
Players:AddToggle("MyToggle",{
Text = "Eat Candies",
Default = false,
Callback = function(v)
_G.EatCandy = v
game:GetService("RunService").RenderStepped:Connect(function()
if game.Players.LocalPlayer.Character:FindFirstChild("Candy",true) and _G.EatCandy then
if not game.Players.LocalPlayer.Character:FindFirstChild("Meshes/DOORS_EvilCandy_Cube", true) then
game.Players.LocalPlayer.Character.Candy.Remote:FireServer()
end
end
end)
end})
if Fools then
Players:AddToggle("Godmode",{
Text = "Godmode",
Default = false,
Callback = function(v)
if v then
local Collison = game.Players.LocalPlayer.Character:FindFirstChild("Collision")
Collison.Position = Collison.Position - Vector3.new(0,10,0)
else
local Collison = game.Players.LocalPlayer.Character:FindFirstChild("Collision")
Collison.Position = Collison.Position - Vector3.new(0,-10,0)
end
task.spawn(function()
while wait(1) do
if game.Players.LocalPlayer.Character.Humanoid.Health == 0 then
Toggles.Godmode:SetValue(false)
end
end
end)
end})
end
Players:AddToggle("MyToggle",{
Text = "No Accessories",
Default = false,
Callback = function(v)
_G.NoSlow = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character.Head.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftHand.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftLowerArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftLowerLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftUpperArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftUpperLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LowerTorso.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightHand.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightLowerArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightLowerLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightUpperArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightUpperLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.UpperTorso.Massless = not _G.NoSlow;
end)
end})
Players:AddToggle("MyToggle",{
Text = "Noclip",
Default = false,
Callback = function(v)
if v then
        noclipConnection = game:GetService("RunService").Stepped:Connect(function()
            local player = game.Players.LocalPlayer
            if player and player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
    end
end})
if not Fools then
local LocalPlayer = Tabs.Players:AddRightGroupbox("LocalPlayer")
LocalPlayer:AddToggle("MyToggle",{
Text = "Can Jump",
Default = false,
Callback = function(v)
_G.Jump = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character:SetAttribute("CanJump", _G.Jump)
end)
end})
LocalPlayer:AddToggle("MyToggle",{
Text = "Auto Jump",
Default = false,
Callback = function(v)
_G.AutoJump = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoJump then
game.Players.LocalPlayer.Character.Humanoid.Jump = true
end
end)
end})
LocalPlayer:AddToggle("MyToggle",{
Text = "Crouch Spoof Bypass",
Default = false,
Callback = function(v)
_G.CrouchSpoof = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.CrouchSpoof then
RemotesFolder.Crouch:FireServer(true)
end
end)
end})
end
local Bypass = Tabs.Players:AddRightGroupbox("Bypass")
local ClonedCollision = game:GetService("Players").LocalPlayer.Character.Collision:Clone()
ClonedCollision.Name = "_CollisionClone"
ClonedCollision.Massless = true
ClonedCollision.Parent = game:GetService("Players").LocalPlayer.Character
ClonedCollision.CanCollide = false
ClonedCollision.CanQuery = false
ClonedCollision.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
if ClonedCollision:FindFirstChild("CollisionCrouch") then
ClonedCollision.CollisionCrouch:Destroy()
end
task.spawn(function()
while task.wait(0.23) do
if _G.SpeedBypass and not _G.SeekSpeed then
if ClonedCollision then
ClonedCollision.Massless = false
task.wait(0.23)
if game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Anchored then
ClonedCollision.Massless = true
task.wait(1)
end
ClonedCollision.Massless = true
end
end
end
end)
Bypass:AddToggle("MyToggle",{
Text = "Speed Bypass",
Default = false,
Callback = function(v)
_G.SpeedBypass = v
end})
if Mines then
Bypass:AddToggle("MyToggle",{
Text = "Ladder Bypass",
Default = false,
Callback = function(v)
_G.LadderBypass = v
task.spawn(function()
while _G.LadderBypass do wait(1)
if _G.LadderBypass and not workspace:FindFirstChild("Ladder_Bypass") then
local progressPart = Instance.new("Part", workspace) do
progressPart.Anchored = true
progressPart.CanCollide = false
progressPart.Name = "Ladder_Bypass"
progressPart.Transparency = 1
end
if _G.LadderBypass and game.Players.LocalPlayer.Character:GetAttribute("Climbing") then
task.wait()
game.Players.LocalPlayer.Character:SetAttribute("Climbing", false)
Notification:Notify("Complete Bypass!")
end
else
if workspace:FindFirstChild("Ladder_Bypass") then 
workspace:FindFirstChild("Ladder_Bypass"):Destroy() 
end
end
end
end)
end})
end
Bypass:AddToggle("MyToggle",{
Text = "Manipulate Bypass",
Default = false,
Callback = function(v)
_G.ManipulateBypass = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.ManipulateBypass then
game.Players.LocalPlayer.Character:PivotTo(game.Players.LocalPlayer.Character:GetPivot() + workspace.CurrentCamera.CFrame.LookVector * Vector3.new(1, 0, 1) * -100)
end
end)
end}):AddKeyPicker("Noclip", {
    Default = "B",
    Text = "Manipulate Bypass",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})







































































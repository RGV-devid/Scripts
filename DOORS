local function CylinderESP(child, color, title)
local Adornment = Instance.new("CylinderHandleAdornment")
Adornment.Height = child.Size.Y * 1.75
Adornment.Radius = child.Size.X * 1
Adornment.CFrame = CFrame.new(0,0,0) * CFrame.Angles(math.rad(90), 0, 0)
Adornment.Color3 = color
Adornment.Transparency = 0.6
Adornment.AlwaysOnTop = true
Adornment.ZIndex = 10
Adornment.Adornee = child
Adornment.Name = title
Adornment.Parent = child
game:GetService("RunService").RenderStepped:Connect(function()
if getgenv().RainbowESP then
Adornment.Color3 = Color3.fromHSV(tick() % 10/10,1,1)
else
Adornment.Color3 = color
end
end)
end
local Main_Game = require(game.Players.LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameData = ReplicatedStorage:WaitForChild("GameData")
local Floor = GameData:WaitForChild("Floor")
local Fools = Floor.Value == "Fools"
local Hotel = Floor.Value == "Hotel"
local Rooms = Floor.Value == "Rooms"
local Mines = Floor.Value == "Mines"
local Retro = Floor.Value == "Retro"
local Rooms = Floor.Value == "Rooms"
local Backdoor = Floor.Value == "Backdoor"
local Hotelold = game.PlaceId == 110258689672367
if (Fools or game.PlaceId == 110258689672367) then
RemotesFolder = ReplicatedStorage.Bricks
else
RemotesFolder = ReplicatedStorage.RemotesFolder
end
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()
local LibraryESP = loadstring(game:HttpGet("https://github.com/Cold-Script/ESPBETA/blob/main/Esp?raw=true"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
	Title = "YOUHUB | DOORS",
	Footer = "BETA v0.0.2",
	Icon = 95869322194132,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
  Main = Window:AddTab("Main"),
  Players = Window:AddTab("Players"),
  Exploits = Window:AddTab("Exploits"),
  Visual = Window:AddTab("Visual"),
  Settings = Window:AddTab("Settings"),
}
local Fast = Tabs.Main:AddLeftGroupbox("Fast")
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.FastDoors then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door"):SetAttribute("FastOpen", true)
end 
end)
end)
Fast:AddToggle("DoorsFast",{
Text = "Doors Fast",
Default = false,
Callback = function(v)
_G.FastDoors = v
end})
local Reach = Tabs.Main:AddRightGroupbox("Reach")
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.DoorsReach then game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door").ClientOpen:FireServer()
end 
end)
end)
Reach:AddToggle("DoorsReach",{
Text = "Doors Reach",
Default = false,
Callback = function(v)
_G.DoorsReach = v
end})
Reach:AddToggle("Reach",{
Text = "Reach",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 15
end
end
IncreasedDistance = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 15
end
end
end)
else
IncreasedDistance:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 8
end
end
end
end})
local Interact = Tabs.Main:AddLeftGroupbox("Interact")
Interact:AddToggle("ThroughInteract",{
Text = "Through Interact",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
ThroughInteract = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
end)
else
ThroughInteract:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = true
end
end
end
end})
Interact:AddToggle("InstanceInteract",{
Text = "Instance Interact",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
InstanceInteract = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
end)
else
InstanceInteract:Disconnect()
end
end})
shared = {
    Character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait(),
    LocalPlayer = game.Players.LocalPlayer,
    Humanoid = nil,
}

local function InitializeScript()
    shared.Humanoid = shared.Character:WaitForChild("Humanoid")
    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        shared.Character = char
        shared.Humanoid = char:WaitForChild("Humanoid")
    end)
end

shared.fireproximityprompt = function(prompt)
    if prompt.ClassName == "ProximityPrompt" then
        fireproximityprompt(prompt)
    end
end

local Script = {
    PromptTable = {
        GamePrompts = {},
        Aura = {
            ["ActivateEventPrompt"] = false,
            ["AwesomePrompt"] = true,
            ["FusesPrompt"] = true,
            ["HerbPrompt"] = false,
            ["LeverPrompt"] = true,
            ["LootPrompt"] = false,
            ["ModulePrompt"] = true,
            ["SkullPrompt"] = false,
            ["UnlockPrompt"] = true,
            ["ValvePrompt"] = false,
            ["PropPrompt"] = true
        },
        AuraObjects = {
            "Lock",
            "Button"
        },
        Clip = {
            "AwesomePrompt",
            "FusesPrompt",
            "HerbPrompt",
            "HidePrompt",
            "LeverPrompt",
            "LootPrompt",
            "ModulePrompt",
            "Prompt",
            "PushPrompt",
            "SkullPrompt",
            "UnlockPrompt",
            "ValvePrompt"
        },
        ClipObjects = {
            "LeverForGate",
            "LiveBreakerPolePickup",
            "LiveHintBook",
            "Button",
        },
        Excluded = {
            Prompt = {
                "HintPrompt",
                "InteractPrompt"
            },
            Parent = {
                "KeyObtainFake",
                "Padlock"
            },
            ModelAncestor = {
                "DoorFake"
            }
        }
    },
    Temp = {
        PaintingDebounce = {}
    }
}

Script.Functions = {
    GetAllPromptsWithCondition = function(condition)
        local prompts = {}
        for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                if condition(v) then
                    table.insert(prompts, v)
                end
            end
        end
        return prompts
    end,

    DistanceFromCharacter = function(object)
        if not shared.Character or not shared.Character:FindFirstChild("HumanoidRootPart") or not object then
            return math.huge
        end
        local objectPosition = object:IsA("BasePart") and object.Position or 
                             object:FindFirstChild("HumanoidRootPart") and object.HumanoidRootPart.Position or
                             object:FindFirstChildWhichIsA("BasePart") and object:FindFirstChildWhichIsA("BasePart").Position
        if not objectPosition then
            return math.huge
        end
        return (shared.Character.HumanoidRootPart.Position - objectPosition).Magnitude
    end,
    
    IsExcluded = function(prompt)
        for _, excludedName in ipairs(Script.PromptTable.Excluded.Prompt) do
            if prompt.Name == excludedName then return true end
        end
        if prompt.Parent then
            for _, excludedParent in ipairs(Script.PromptTable.Excluded.Parent) do
                if prompt.Parent.Name == excludedParent then return true end
            end
        end
        local model = prompt:FindFirstAncestorWhichIsA("Model")
        if model then
            for _, excludedModel in ipairs(Script.PromptTable.Excluded.ModelAncestor) do
                if model.Name == excludedModel then return true end
            end
        end
        return false
    end
}

local AutoInteractEnabled = false
local IgnoreSettings = {
    ["Jeff Items"] = true,
    ["Unlock Lockpick"] = false,
    ["Paintings"] = true,
    ["Gold"] = false,
    ["Light Source Items"] = false,
    ["Skull Prompt"] = false
}
Interact:AddDivider()
Interact:AddToggle("Auto-interact", {
	Text = "Auto Interact",
	Default = false,
	Callback = function(v)
        _G.AutoInteractEnabled = v
end}):AddKeyPicker("AutoInteractKeybind", {
   Default = "R",
   Text = "Auto Interact",
   Mode = Library.IsMobile and "Toggle" or "Hold",
   SyncToggleState = Library.IsMobile
})

Interact:AddDropdown("Auto-interact-drop", {
	Values = {"Jeff Items", "Unlock Lockpick", "Paintings", "Gold", "Light Source Items", "Skull Prompt"},
	Default = 1,
	Multi = true,
	Text = "Ignore list",
	Searchable = false,
	Callback = function(v)
        for k, _ in pairs(IgnoreSettings) do
            IgnoreSettings[k] = false
        end
        for _, v in pairs(v) do
            IgnoreSettings[v] = true
			end
	end,
	Disabled = false,
	Visible = true, 
})
local function AutoInteractLoop()
    while true do wait()
        task.wait(0.2)
        if _G.AutoInteractEnabled then
            local prompts = Script.Functions.GetAllPromptsWithCondition(function(prompt)
                if not prompt.Parent then return false end
                if IgnoreSettings["Jeff Items"] and prompt.Parent:GetAttribute("JeffShop") then return false end
                if IgnoreSettings["Unlock Lockpick"] and (prompt.Name == "UnlockPrompt" or prompt.Parent:GetAttribute("Locked")) and shared.Character:FindFirstChild("Lockpick") then return false end
                if IgnoreSettings["Paintings"] and prompt.Name == "PropPrompt" then return false end
                if IgnoreSettings["Gold"] and prompt.Name == "LootPrompt" then return false end
                if IgnoreSettings["Light Source Items"] and prompt.Parent:GetAttribute("Tool_LightSource") and not prompt.Parent:GetAttribute("Tool_CanCutVines") then return false end
                if IgnoreSettings["Skull Prompt"] and prompt.Name == "SkullPrompt" then return false end
                if prompt.Parent:GetAttribute("PropType") == "Battery" and not (shared.Character:FindFirstChildOfClass("Tool") and (shared.Character:FindFirstChildOfClass("Tool"):GetAttribute("RechargeProp") == "Battery" or shared.Character:FindFirstChildOfClass("Tool"):GetAttribute("StorageProp") == "Battery")) then return false end 
                if prompt.Parent:GetAttribute("PropType") == "Heal" and shared.Humanoid and shared.Humanoid.Health == shared.Humanoid.MaxHealth then return false end
                if prompt.Parent.Name == "MinesAnchor" then return false end
                if Script.IsRetro and prompt.Parent.Parent.Name == "RetroWardrobe" then return false end
                return Script.PromptTable.Aura[prompt.Name] ~= nil
            end)

            for _, prompt in pairs(prompts) do
                task.spawn(function()
                    if Script.Functions.DistanceFromCharacter(prompt.Parent) < 12 and (not prompt:GetAttribute("Interactions" .. shared.LocalPlayer.Name) or Script.PromptTable.Aura[prompt.Name] or table.find(Script.PromptTable.AuraObjects, prompt.Parent.Name)) then
                        if prompt.Parent.Name == "Slot" and prompt.Parent:GetAttribute("Hint") then
                            if Script.Temp.PaintingDebounce[prompt] then return end
                            local currentPainting = shared.Character:FindFirstChild("Prop")
                            local slotPainting = prompt.Parent:FindFirstChild("Prop")
                            local currentHint = (currentPainting and currentPainting:GetAttribute("Hint"))
                            local slotHint = (slotPainting and slotPainting:GetAttribute("Hint"))
                            local promptHint = prompt.Parent:GetAttribute("Hint")
                            if slotHint ~= promptHint and (currentHint == promptHint or slotPainting) then
                                Script.Temp.PaintingDebounce[prompt] = true
                                shared.fireproximityprompt(prompt)
                                task.wait(0.3)
                                Script.Temp.PaintingDebounce[prompt] = false    
                            end
                            return
                        end
                        shared.fireproximityprompt(prompt)
                    end
                end)
            end
        end
    end
end
InitializeScript()
task.spawn(AutoInteractLoop)
local Automation = Tabs.Main:AddRightGroupbox("Automation")
Automation:AddToggle("AutoBreaker",{
Text = "Auto Breaker",
Default = false,
Callback = function(v)
_G.AutoBreaker = v
while _G.AutoBreaker do wait(1)
if _G.AutoBreaker then
RemotesFolder.EBF:FireServer()
end
end
end})
Automation:AddToggle("AutoPadlockUnlock",{
Text = "Auto Padlock Unlock",
Default = false,
Callback = function(v)
_G.AutoPadlockUnlock = v
while _G.AutoPadlockUnlock do wait(0.5)
        for _, player in pairs(game.Players:GetPlayers()) do
            if not player.Character then continue end
            local tool = player.Character:FindFirstChildOfClass("Tool")

            if tool and tool.Name:match("LibraryHintPaper") then
                local code = tool:FindFirstChild("Code") and tool.Code.Value or nil
                local padlock = workspace:FindFirstChild("Padlock", true)

                if tonumber(code) and (padlock.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.PadlockUnlockDistance or 50 then
                    firetouchinterest(padlock, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
                    firetouchinterest(padlock, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
                end
            end
        end
    end
end})
Automation:AddDivider()
Automation:AddSlider("UnlockDistance",{
Text = "Unlock Distance",
Default = 50,
Min = 50,
Max = 200,
Rounding = 2,
Compact = true,
Callback = function(v)
_G.PadlockUnlockDistance = v
end})
local World = Tabs.Main:AddLeftGroupbox("World")
game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(function()
if _G.ClosetsExitFix and game.Players.LocalPlayer.Character:GetAttribute("Hiding")==true then 
RemotesFolder.CamLock:FireServer()
end 
end)
World:AddToggle("ClosetsExitFix",{
Text = "Closets Exit Fix",
Default = false,
Callback = function(v)
_G.ClosetsExitFix = v
end})
if Retro then
World:AddToggle("BlurFakeBridge",{
Text = "Blur Fake Brigde",
Default = false,
Callback = function(v)
_G.BlurFakeBridge = v
if _G.BlurFakeBridge then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.9
end
end
BlurFakeBridge = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0.75
end
end
end)
else
BlurFakeBridge:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true then
v.Transparency = 0
end
end
end
end})
end
if not Hotelold or not Fools or not Retro then
World:AddToggle("HidingLiveSanity",{
Text = "Hiding Live Sanity",
Default = false,
Callback = function(v)
_G.NoLiveSanity = v
while _G.NoLiveSanity do wait(1)
for _,v in workspace.CurrentCamera:GetChildren() do
if v.Name == "LiveSanity" and workspace:FindFirstChild("EntityModel") then
v.Enabled = not _G.NoLiveSanity
end
end
end
end})
end
World:AddToggle("HidingVoidRoblox",{
Text = "Hiding Void Roblox",
Default = false,
Callback = function(v)
if v then
workspace.FallenPartsDestroyHeight = 0 / 0
else
workspace.FallenPartsDestroyHeight = -50000
end
end})
if not Hotelold or not Retro then
World:AddToggle("NoHidingVignette",{
Text = "No Hiding Vignette",
Default = false,
Callback = function(v)
_G.NoHidingVignette = v
task.spawn(function()
while wait(0.1) do
local vignette = game:GetService("Players").LocalPlayer.PlayerGui.MainUI.MainFrame.HideVignette
        if _G.NoHidingVignette then
            vignette.Size = UDim2.new(0,0,0,0)
        else
            vignette.Size = UDim2.new(1,0,1,0)
        end
      end
   end)
end})
end
local Misc = Tabs.Main:AddRightGroupbox("Misc")
Misc:AddButton({
Text = "Lobby",
DoubleClick = true,
Func = function()
RemotesFolder.Lobby:FireServer()
end})
Misc:AddButton({
Text = "Revive",
DoubleClick = true,
Func = function()
RemotesFolder.Revive:FireServer()
end})
Misc:AddButton({
Text = "Exit",
DoubleClick = true,
Func = function()
game:Shutdown()
end})
Misc:AddButton({
Text = "Play Again",
DoubleClick = true,
Func = function()
RemotesFolder.PlayAgain:FireServer()
end})
Misc:AddButton({
Text = "Reset Character",
DoubleClick = true,
Func = function()
game.Players.LocalPlayer.Character.Humanoid.Health = 0
end})


local Players = Tabs.Players:AddLeftGroupbox("Players")
Players:AddSlider("SpeedBoostSlider",{
Text = "Speed Boost",
Min = 15,
Default = 15,
Max = 50,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.SpeedBoost = v
end})
Players:AddToggle("SpeedBoost",{
Text = "Speed Boost",
Default = false,
Callback = function(v)
_G.EnabledSpeed = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.EnabledSpeed and not _G.SeekSpeed then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.SpeedBoost or 17
game.Players.LocalPlayer.Character:SetAttribute("SpeedBoost", 1)
else
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 17
game.Players.LocalPlayer.Character:SetAttribute("SpeedBoost", 0)
end
end)
end})
Players:AddSlider("SpeedFly",{
    Text = "Speed Fly",
    Default = 16,
    Min = 16,
    Max = 50,
    Rounding = 1,
    Compact = true,
    Callback = function(v)
_G.SetSpeedFly = v
end})
_G.SetSpeedFly = 16
Players:AddToggle("StFly",{
    Text = "Fly",
    Default = false,
    Callback = function(v)
_G.StartFly = v
if _G.StartFly == false then
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler:Destroy()
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler:Destroy()
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
end
end
while _G.StartFly do
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.CFrame = Workspace.CurrentCamera.CoordinateFrame
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SetSpeedFly)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SetSpeedFly)
end
elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") == nil and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") == nil then
local bv = Instance.new("BodyVelocity")
local bg = Instance.new("BodyGyro")

bv.Name = "VelocityHandler"
bv.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bv.MaxForce = Vector3.new(0,0,0)
bv.Velocity = Vector3.new(0,0,0)

bg.Name = "GyroHandler"
bg.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bg.MaxTorque = Vector3.new(0,0,0)
bg.P = 1000
bg.D = 50
end
task.wait()
end
end}):AddKeyPicker("Fly", {
   Default = "F",
   Text = "Fly",
   Mode = Library.IsMobile and "Toggle",
   SyncToggleState = Library.IsMobile
})
Players:AddToggle("SpeedOftion",{
Text = "Speed Offtion",
Default = false,
Callback = function(v)
_G.SeekSpeed = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.SeekSpeed then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20.5
end
end)
end}):AddKeyPicker("SeekSpeed", {
    Default = "Q",
    Text = "Speed Offtion",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})
Players:AddDivider()
Players:AddToggle("EatCandies",{
Text = "Eat Candies",
Default = false,
Callback = function(v)
_G.EatCandy = v
game:GetService("RunService").RenderStepped:Connect(function()
if game.Players.LocalPlayer.Character:FindFirstChild("Candy",true) and _G.EatCandy then
if not game.Players.LocalPlayer.Character:FindFirstChild("Meshes/DOORS_EvilCandy_Cube", true) then
game.Players.LocalPlayer.Character.Candy.Remote:FireServer()
end
end
end)
end})
if Fools or Hotelold then
Players:AddToggle("Godmode",{
Text = "Godmode",
Default = false,
Callback = function(v)
if v then
local Collison = game.Players.LocalPlayer.Character:FindFirstChild("Collision")
Collison.Position = Collison.Position - Vector3.new(0,10,0)
else
local Collison = game.Players.LocalPlayer.Character:FindFirstChild("Collision")
Collison.Position = Collison.Position - Vector3.new(0,-10,0)
end
task.spawn(function()
while wait(1) do
if game.Players.LocalPlayer.Character.Humanoid.Health == 0 then
Toggles.Godmode:SetValue(false)
end
end
end)
end}):AddKeyPicker("Godmode", {
    Default = "G",
    Text = "Godmode",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})

end
Players:AddToggle("NoAccessories",{
Text = "No Accessories",
Default = false,
Callback = function(v)
_G.NoSlow = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character.Head.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftHand.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftLowerArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftLowerLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftUpperArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LeftUpperLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.LowerTorso.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightFoot.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightHand.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightLowerArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightLowerLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightUpperArm.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.RightUpperLeg.Massless = not _G.NoSlow;
game.Players.LocalPlayer.Character.UpperTorso.Massless = not _G.NoSlow;
end)
end})
Players:AddToggle("Noclip",{
Text = "Noclip",
Default = false,
Callback = function(v)
if v then
        noclipConnection = game:GetService("RunService").Stepped:Connect(function()
            local player = game.Players.LocalPlayer
            if player and player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
    end
end}):AddKeyPicker("NC", {
    Default = "N",
    Text = "Noclip ",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})

if not Fools or not Hotelold then
local LocalPlayer = Tabs.Players:AddRightGroupbox("LocalPlayer")
LocalPlayer:AddToggle("CanJump",{
Text = "Can Jump",
Default = false,
Callback = function(v)
_G.Jump = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character:SetAttribute("CanJump", _G.Jump)
end)
end}):AddKeyPicker("CanJump", {
    Default = "J",
    Text = "Can Jump ",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})
LocalPlayer:AddToggle("AutoJump",{
Text = "Auto Jump",
Default = false,
Callback = function(v)
_G.AutoJump = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoJump then
game.Players.LocalPlayer.Character.Humanoid.Jump = true
end
end)
end})
LocalPlayer:AddToggle("CrouchBypass",{
Text = "Crouch Spoof Bypass",
Default = false,
Callback = function(v)
_G.CrouchSpoof = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.CrouchSpoof then
RemotesFolder.Crouch:FireServer(true)
end
end)
end})
end
local Bypass = Tabs.Players:AddRightGroupbox("Bypass")
local ClonedCollision = game:GetService("Players").LocalPlayer.Character.Collision:Clone()
ClonedCollision.Name = "_CollisionClone"
ClonedCollision.Massless = true
ClonedCollision.Parent = game:GetService("Players").LocalPlayer.Character
ClonedCollision.CanCollide = false
ClonedCollision.CanQuery = false
ClonedCollision.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
if ClonedCollision:FindFirstChild("CollisionCrouch") then
ClonedCollision.CollisionCrouch:Destroy()
end
task.spawn(function()
while task.wait(0.23) do
if _G.SpeedBypass and not _G.SeekSpeed then
if ClonedCollision then
ClonedCollision.Massless = false
task.wait(0.23)
if game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Anchored then
ClonedCollision.Massless = true
task.wait(1)
end
ClonedCollision.Massless = true
end
end
end
end)
if not Hotelold then
Bypass:AddToggle("SpeedBypass",{
Text = "Speed Bypass",
Default = false,
Callback = function(v)
_G.SpeedBypass = v
end})
end
if Mines then
Bypass:AddToggle("LadderBypass",{
Text = "Ladder Bypass",
Default = false,
Callback = function(v)
_G.LadderBypass = v
task.spawn(function()
while _G.LadderBypass do wait(1)
if _G.LadderBypass and not workspace:FindFirstChild("Ladder_Bypass") then
local progressPart = Instance.new("Part", workspace) do
progressPart.Anchored = true
progressPart.CanCollide = false
progressPart.Name = "Ladder_Bypass"
progressPart.Transparency = 1
end
if _G.LadderBypass and game.Players.LocalPlayer.Character:GetAttribute("Climbing") then
task.wait()
game.Players.LocalPlayer.Character:SetAttribute("Climbing", false)
Library:Notify("WARNING | Complete Ladder Bypass!")
end
else
if workspace:FindFirstChild("Ladder_Bypass") then 
workspace:FindFirstChild("Ladder_Bypass"):Destroy() 
end
end
end
end)
end})
end
Bypass:AddToggle("ManipulateBypass",{
Text = "Manipulate Bypass",
Default = false,
Callback = function(v)
_G.ManipulateBypass = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.ManipulateBypass then
game.Players.LocalPlayer.Character:PivotTo(game.Players.LocalPlayer.Character:GetPivot() + workspace.CurrentCamera.CFrame.LookVector * Vector3.new(1, 0, 1) * -100)
end
end)
end}):AddKeyPicker("ManiBypassKey", {
    Default = "B",
    Text = "Manipulate Bypass",
    Mode = Library.IsMobile and "Toggle",
    SyncToggleState = Library.IsMobile,
})



local Anti = Tabs.Exploits:AddLeftGroupbox("Anti")
if not Hotelold then
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiSnare then
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("Snare") then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "Snare" then 
v.Hitbox.CanTouch = not _G.AntiSnare
end 
end 
end 
end 
end)
Anti:AddToggle("Anti-Snare",{
Text = "Anti-Snare",
Default = false,
Callback = function(v)
_G.AntiSnare = v
end})
Anti:AddToggle("Anti-Dupe",{
Text = "Anti-Dupe",
Default = false,
Callback = function(v)
_G.AntiDupe = v
if _G.AntiDupe then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" and v:IsA("Model") then
v.Hidden.CanTouch = not _G.AntiDupe
if v:FindFirstChild("LockPart") and v.LockPart:FindFirstChild("UnlockPrompt") then
v.LockPart.UnlockPrompt.Enabled = not true
end
end
end
AntiDupe = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" and v:IsA("Model") then
v.Hidden.CanTouch = not _G.AntiDupe
if v:FindFirstChild("LockPart") and v.LockPart:FindFirstChild("UnlockPrompt") then
v.LockPart.UnlockPrompt.Enabled = not true
end
end
end
end)
else
AntiDupe:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "DoorFake" and v:IsA("Model") then
v.Hidden.CanTouch = not false
if v:FindFirstChild("LockPart") and v.LockPart:FindFirstChild("UnlockPrompt") then
v.LockPart.UnlockPrompt.Enabled = not false
end
end
end
end
end})
end
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiChandelier then 
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("ChandelierObstruction") then 
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "ChandelierObstruction" then 
v.HurtPart.CanTouch = not _G.AntiChandelier
end 
end 
end 
end 
end)
Anti:AddToggle("Anti-Chandelier",{
Text = "Anti-Chandelier",
Default = false,
Callback = function(v)
_G.AntiChandelier = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiSeekArms then
if game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):FindFirstChild("Seek_Arm") then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Assets"):GetChildren()) do 
if v.Name == "Seek_Arm" then 
v.AnimatorPart.CanTouch = not _G.AntiSeekArms
end 
end 
end 
end 
end)
Anti:AddToggle("Anti-SeekArms",{
Text = "Anti-Seek Arms",
Default = false,
Callback = function(v)
_G.AntiSeekArms = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
if not (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character:FindFirstChild("Collision")) then return end
if workspace:FindFirstChild("Eyes") and _G.AntiEyes then
if not Fools then
for _, v in workspace:GetChildren() do
if v.Name == "Eyes" and v:FindFirstChild("Core") and v.Core:FindFirstChild("Ambience") and v.Core.Ambience.Playing then
RemotesFolder.MotorReplication:FireServer(-650)
break
end
end
end
end
if workspace:FindFirstChild("Eyes") and _G.AntiEyes then
if Fools then
for _, v in workspace:GetChildren() do
if v.Name == "Eyes" and v:FindFirstChild("Core") and v.Core:FindFirstChild("Ambience") and v.Core.Ambience.Playing then
RemotesFolder.MotorReplication:FireServer(0,120,0,false)
break
end
end
end
end
if workspace:FindFirstChild("BackdoorLookman") and _G.AntiLookman then
for _, v in workspace:GetChildren() do
if v.Name == "BackdoorLookman" and v:FindFirstChild("Core") and v.Core:FindFirstChild("Ambience") and v.Core.Ambience.Playing then
RemotesFolder.MotorReplication:FireServer(-650)
break
end
end
end
end)
Anti:AddToggle("Anti-Eyes",{
Text = "Anti-Eyes",
Default = false,
Callback = function(v)
_G.AntiEyes = v
end})
Anti:AddToggle("RemoveScreech",{
Text = "Anti-Screech",
Default = false,
Callback = function(v)
_G.RemovalScreech = v
if _G.RemovalScreech then
RemotesFolder.Screech.Name = "_Screech"
else
RemotesFolder._Screech.Name = "Screech"
end
end})
if not Hotelold then
Anti:AddToggle("Anti-Lookman",{
Text = "Anti-Lookman",
Default = false,
Callback = function(v)
_G.AntiLookman = v
end})
game:GetService("RunService").RenderStepped:Connect(function()
pcall(function()
if _G.AntiGiggle then
for _, room in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetChildren()) do
if room.Name == "GiggleCeiling" then
room.Hitbox.CanTouch = not _G.AntiGiggle
end
end
end
end)
end)
Anti:AddToggle("Anti-Giggle",{
Text = "Anti-Giggle",
Default = false,
Callback = function(v)
_G.AntiGiggle = v
end})
end
if Retro then
Anti:AddDivider()
Anti:AddToggle("Anti-Lava",{
Text = "Anti-Lava",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Lava" then
v.CanTouch = false
end
end
AntiLava = workspace.CurrentRooms.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Lava" then
v.CanTouch = false
end
end
end)
else
AntiLava:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Lava" then
v.CanTouch = true
end
end
end
end})
Anti:AddToggle("AntiSeekWall",{
Text = "Anti-Seek Wall",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "TheWall" then
v.CanTouch = false
end
end
AntiWall = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "TheWall" then
v.CanTouch = false
end
end
end)
else
AntiWall:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "TheWall" then
v.CanTouch = true
end
end
end
end})
end
if Fools then
Anti:AddDivider()
Anti:AddToggle("AntiBanana",{
Text = "Anti-Banana",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "BananaPeel" then
v.CanTouch = false
v:Destroy()
end
end
AntiBanana = workspace.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "BananaPeel" then
v.CanTouch = false
v:Destroy()
end
end
end)
else
AntiBanana:Disconnect()
end
end})
end


local Disabled = Tabs.Exploits:AddRightGroupbox("Disabled")
if not Hotelold then
Disabled:AddToggle("RemoveA90",{
Text = "Removal-A90",
Default = false,
Callback = function(v)
if v then
RemotesFolder.A90.Name = "_A90"
game.Players.LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Jumpscare"):FindFirstChild("Jumpscare_A90").Parent = nil
else
RemotesFolder._A90.Name = "A90"
game.Players.LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Jumpscare"):FindFirstChild("Jumpscare_A90").Parent = game.Players.LocalPlayers.PlayerGui.MainUI.Jumpscare
end
end})
end
Disabled:AddToggle("RemoveHalt",{
Text = "Removal-Halt",
Default = false,
Callback = function(v)
_G.AntiHalt = v
while _G.AntiHalt do wait(0.1)
ReplicatedStorage.ClientModules.EntityModules.Shade.Parent = game.Workspace
end
end})
if not Fools or not Hotelold then
Disabled:AddToggle("RemoveDread",{
Text = "Removal-Dread",
Default = false,
Callback = function(v)
_G.AntiDread = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiDread then
RemotesFolder.Dread:FireServer(false)
else
RemotesFolder.Dread:FireServer(true)
end
end)
end})
end
if Retro then
Disabled:AddDivider()
Disabled:AddToggle("RemoveDrakoBloxxer",{
Text = "Removal-DrakoBloxxer",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Drakobloxxer" then
v:Destroy()
end
end
AntiDrakobloxxer = workspace.ChildAdded:Connect(function()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Drakobloxxer" then
v:Destroy()
end
end
end)
else
AntiDrakobloxxer:Disconnect()
end
end})
end
if Fools then
Disabled:AddDivider()
Disabled:AddToggle("RemoveJeff",{
Text = "Removal-Jeff",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.Knife.CanTouch = false 
v.Knife.CanCollide = false
v:Destroy()
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.Head.CanTouch = false 
v.Head.CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.HumanoidRootPart.CanTouch = false 
v.HumanoidRootPart.CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Left Arm"].CanTouch = false 
v["Left Arm"].CanCollide = false
end 
end
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Left Leg"].CanTouch = false 
v["Left Leg"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Right Arm"].CanTouch = false 
v["Right Arm"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Right Leg"].CanTouch = false 
v["Right Leg"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do
if v.Name == "JeffTheKiller" then 
v.Torso.CanTouch = false 
v.Torso.CanCollide = false
end 
end 
AntiJeff = workspace.ChildAdded:Connect(function(child)
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.Knife.CanTouch = false 
v.Knife.CanCollide = false
v:Destroy()
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.Head.CanTouch = false 
v.Head.CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v.HumanoidRootPart.CanTouch = false 
v.HumanoidRootPart.CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Left Arm"].CanTouch = false 
v["Left Arm"].CanCollide = false
end 
end
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Left Leg"].CanTouch = false 
v["Left Leg"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Right Arm"].CanTouch = false 
v["Right Arm"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do 
if v.Name == "JeffTheKiller" then 
v["Right Leg"].CanTouch = false 
v["Right Leg"].CanCollide = false
end 
end 
for _,v in pairs(game.workspace:GetChildren()) do
if v.Name == "JeffTheKiller" then 
v.Torso.CanTouch = false 
v.Torso.CanCollide = false
end 
end 
end)
else
AntiJeff:Disconnect()
end
end})
end
if Hotelold or Fools then
Disabled:AddDivider()
Disabled:AddToggle("RemoveSeek",{
Text = "Removal-Seek Chase",
Default = false,
Callback = function(v)
_G.AntiSeekCar = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AntiSeekCar then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do 
if v.Name == "TriggerEventCollision" then 
v:Destroy()
end 
end 
end
end)
end})
Disabled:AddToggle("RemoveGate",{
Text = "Removal-Gate",
Default = false,
Callback = function(v)
_G.RemovalGate = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.RemovalGate then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do 
if v.Name == "Gate" then 
v:Destroy()
end 
end 
end
end)
end})
Disabled:AddToggle("RemoveSkeleton",{
Text = "Removal-Skeleton Door",
Default = false,
Callback = function(v)
_G.RemovalSkeleton = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.RemovalSkeleton then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do 
if v.Name == "Wax_Door" then 
v:Destroy()
end 
end 
end
end)
end})
Disabled:AddToggle("RemovePuzzle",{
Text = "Removal-Puzzle Door",
Default = false,
Callback = function(v)
_G.RemovalPuzzle = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.RemovalPuzzle then
for _,v in pairs(game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do 
if v.Name == "MovingDoor" then 
v:Destroy()
end 
end 
end
end)
end})
end
local Troll = Tabs.Exploits:AddRightGroupbox("Trolling")
if not Hotelold then
Troll:AddToggle("Stunned",{
Text = "Stunned",
Default = false,
Callback = function(v)
local lplr = game.Players.LocalPlayer
        if v then
            lplr.Character:SetAttribute('Stunned', true)
            lplr.Character.Humanoid:SetAttribute('Stunned', true)
        else
            lplr.Character:SetAttribute('Stunned', false)
            lplr.Character.Humanoid:SetAttribute('Stunned', false)
        end
end})
end
Troll:AddToggle("Thoughts",{
Text = "Thoughts",
Default = false,
Callback = function(v)
local lplr = game.Players.LocalPlayer
        local thinkanims = {"18885101321", "18885098453", "18885095182"}
        
        if v then
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. thinkanims[math.random(1, #thinkanims)]
            animtrack = lplr.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(animation)
            animtrack.Looped = true
            animtrack:Play()
        else
            if animtrack then
                animtrack:Stop()
                animtrack:Destroy()
            end
        end
end})
Troll:AddToggle("UpsideDown",{
Text = "Upside Down",
Default = false,
Callback = function(v)
local collision = game.Players.LocalPlayer.Character.Collision
if not collision then return end
    if v then
        local rotation = collision.Rotation
        collision.Rotation = Vector3.new(rotation.X, rotation.Y, -90)

        task.spawn(function()
            repeat task.wait() until not Toggles.UpsideDown.Value or Library.Unloaded
            
            if collision then
                rotation = collision.Rotation
    
                collision.Rotation = Vector3.new(rotation.X, rotation.Y, 90)
            end
        end)
    end
end})
Troll:AddToggle("LagMove",{
Text = "Lag Move",
Default = false,
Callback = function(v)
_G.LagBody = v
while _G.LagBody and task.wait(0.5) do
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
wait(0.5)
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
end
end})
Troll:AddToggle("SpamMotorReplication",{
Text = "Spam Motor Replication",
Default = false,
Callback = function(v)
if v then
SpoofMotor = game:GetService("RunService").Heartbeat:Connect(function()
RemotesFolder.MotorReplication:FireServer(math.random(1,100000),math.random(1,100000),math.random(1,100000),false)
end)
else
SpoofMotor:Disconnect()
end
end})


local ESP = Tabs.Visual:AddLeftGroupbox("ESP")
ESP:AddToggle("DoorESP",{
Text = "Door ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Door" and v.Parent.Name == "Door" then
if not v:FindFirstChild("DoorESP") then
LibraryESP:AddESP(v, v.Name, _G.DoorCE or Color3.fromRGB(135,135,255), 20, "DoorESP")
end
end
end
DoorESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "Door" and v.Parent.Name == "Door" then
if not v:FindFirstChild("DoorESP") then
LibraryESP:AddESP(v, v.Name, _G.DoorCE or Color3.fromRGB(135,135,255), 20, "DoorESP")
end
end
end)
else
DoorESP:Disconnect()
LibraryESP:Delete("DoorESP")
end
end}):AddColorPicker("DoorESP",{
Default = Color3.fromRGB(135, 135, 255),
Callback = function(v)
_G.DoorCE = v
end})
ESP:AddToggle("KeyESP",{
Text = "Key ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do
if v.Name == "KeyObtain" then
if not v:FindFirstChild("KeyESP") then
LibraryESP:AddESP(v, "Key", _G.KeyCE or Color3.fromRGB(135,255,255), 20, "KeyESP")
end
elseif v.Name == "ElectricalKeyObtain" then
if not v:FindFirstChild("KeyESP") then
LibraryESP:AddESP(v, "Electrical Key", _G.KeyCE or Color3.fromRGB(135,255,255), 20, "KeyESP")
end
end
end
KeyESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "KeyObtain" then
if not v:FindFirstChild("KeyESP") then
LibraryESP:AddESP(v, "Key", _G.KeyCE or Color3.fromRGB(135,255,255), 20, "KeyESP")
end
elseif v.Name == "ElectricalKeyObtain" then
if not v:FindFirstChild("KeyESP") then
LibraryESP:AddESP(v, "Electrical Key", _G.KeyCE or Color3.fromRGB(135,255,255), 20, "KeyESP")
end
end
end)
else
KeyESP:Disconnect()
LibraryESP:Delete("KeyESP")
end
end}):AddColorPicker("KeyESP",{
Default = Color3.fromRGB(135, 255, 255),
Callback = function(v)
_G.KeyCE = v
end})
ESP:AddToggle("LeverESP",{
Text = "Lever ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:GetDescendants()) do
if v.Name == "LeverForGate" then
if not v:FindFirstChild("LeverESP") then
LibraryESP:AddESP(v, "Lever", _G.LeverCE or Color3.fromRGB(0,255), 20, "LeverESP")
end
elseif v.Name == "TimerLever" then
if not v:FindFirstChild("LeverESP") then
LibraryESP:AddESP(v, "TimerLever", _G.LeverCE or Color3.fromRGB(0,255), 20, "LeverESP")
end
end
end
LeverESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "LeverForGate" then
if not v:FindFirstChild("LeverESP") then
LibraryESP:AddESP(v, "Lever", _G.LeverCE or Color3.fromRGB(0,255), 20, "LeverESP")
end
elseif v.Name == "TimerLever" then
if not v:FindFirstChild("LeverESP") then
LibraryESP:AddESP(v, "TimerLever", _G.LeverCE or Color3.fromRGB(0,255), 20, "LeverESP")
end
end
end)
else
LeverESP:Disconnect()
LibraryESP:Delete("LeverESP")
end
end}):AddColorPicker("LeverESP",{
Default = Color3.fromRGB(0,255),
Callback = function(v)
_G.LeverCE = v
end})
ESP:AddToggle("GeneratorESP",{
Text = "Generator ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "MinesGenerator" then
if not v:FindFirstChild("GeneratorESP") then
LibraryESP:AddESP(v, "Generator", _G.GeneratorCE or Color3.fromRGB(0,255), 20, "GeneratorESP")
end
end
end
GeneratorESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "MinesGenerator" then
if not v:FindFirstChild("GeneratorESP") then
LibraryESP:AddESP(v, "Generator", _G.GeneratorCE or Color3.fromRGB(0,255), 20, "GeneratorESP")
end
end
end)
else
GeneratorESP:Disconnect()
LibraryESP:Delete("GeneratorESP")
end
end}):AddColorPicker("GeneratorESP",{
Default = Color3.fromRGB(0,255),
Callback = function(v)
_G.GeneratorCE = v
end})
ESP:AddToggle("FuseESP",{
Text = "Fuse ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "FuseObtain" then
if not v:FindFirstChild("FuseESP") then
LibraryESP:AddESP(v, "Fuse", _G.FuseCE or Color3.fromRGB(255,255,255), 20, "FuseESP")
end
end
end
FuseESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "FuseObtain" then
if not v:FindFirstChild("FuseESP") then
LibraryESP:AddESP(v, "Fuse", _G.FuseCE or Color3.fromRGB(255,255,255), 20, "FuseESP")
end
end
end)
else
FuseESP:Disconnect()
LibraryESP:Delete("FuseESP")
end
end}):AddColorPicker("FuseESP",{
Default = Color3.fromRGB(0,255),
Callback = function(v)
_G.FuseCE = v
end})
ESP:AddToggle("BookESP",{
Text = "Book ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LiveHintBook" then
if not v:FindFirstChild("BookESP") then
LibraryESP:AddESP(v, "Book", _G.BookCE or Color3.fromRGB(255,0,255), 20, "BookESP")
end
end
end
BookESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "LiveHintBook" then
if not v:FindFirstChild("BookESP") then
LibraryESP:AddESP(v, "Book", _G.BookCE or Color3.fromRGB(255,0,255), 20, "BookESP")
end
end
end)
else
BookESP:Disconnect()
LibraryESP:Delete("BookESP")
end
end}):AddColorPicker("BookESP",{
Default = Color3.fromRGB(255,0,255),
Callback = function(v)
_G.BookCE = v
end})
ESP:AddToggle("BreakerESP",{
Text = "Breaker ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "LiveBreakerPolePickup" then
if not v:FindFirstChild("BreakerESP") then
LibraryESP:AddESP(v, "Breaker", _G.BreakerCE or Color3.fromRGB(255,255,255), 20, "BreakerESP")
end
end
end
BreakerESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "LiveBreakerPolePickup" then
if not v:FindFirstChild("BreakerESP") then
LibraryESP:AddESP(v, "Breaker", _G.BreakerCE or Color3.fromRGB(255,255,255), 20, "BreakerESP")
end
end
end)
else
BreakerESP:Disconnect()
LibraryESP:Delete("BreakerESP")
end
end}):AddColorPicker("BreakerESP",{
Default = Color3.fromRGB(255,255,255),
Callback = function(v)
_G.BreakerCE = v
end})
ESP:AddToggle("AnchorESP",{
Text = "Anchor ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "MinesAnchor" then
if not v:FindFirstChild("AnchorESP") then
LibraryESP:AddESP(v, "Anchor " .. v.Sign.TextLabel.Text, _G.AnchorCE or Color3.fromRGB(255,255,255), 20, "AnchorESP")
end
end
end
AnchorESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "MinesAnchor" then
if not v:FindFirstChild("AnchorESP") then
LibraryESP:AddESP(v, "Anchor " .. v.Sign.TextLabel.Text, _G.AnchorCE or Color3.fromRGB(255,255,255), 20, "AnchorESP")
end
end
end)
else
AnchorESP:Disconnect()
LibraryESP:Delete("AnchorESP")
end
end}):AddColorPicker("AnchorESP",{
Default = Color3.fromRGB(255,255,255),
Callback = function(v)
_G.AnchorCE = v
end})
ESP:AddToggle("PlayerESP",{
Text = "Players ESP",
Default = false,
Callback = function(v)
if v then
for _,Player in pairs(game:GetService("Players"):GetPlayers()) do
if Player ~= game:GetService("Players").LocalPlayer then
ESP:AddESP(Player.Character, Player.DisplayName .. "\n[HP:" .. Player.Character.Humanoid.Health .. "%]", _G.PlayerCE or Color3.new(1,1,1), 14, "PlayerESP")
end
end
PlayerESP = workspace.DescendantAdded:Connect(function(v)
for _,Player in pairs(game:GetService("Players"):GetPlayers()) do
if Player ~= game:GetService("Players").LocalPlayer then
ESP:AddESP(Player.Character, Player.DisplayName .. "\n[HP:" .. Player.Character.Humanoid.Health .. "%]", _G.PlayerCE or Color3.new(1,1,1), 14, "PlayerESP")
end
end
end)
else
PlayerESP:Disconnect()
LibraryESP:Delete("PlayerESP")
end
end}):AddColorPicker("PlayerESP",{
Default = Color3.fromRGB(255,255,255),
Callback = function(v)
_G.PlayerCE = v
end})
ESP:AddToggle("GoldESP",{
Text = "Gold ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "GoldPile" then
if not v:FindFirstChild("GoldESP") then
LibraryESP:AddESP(v, "Gold " .. v:GetAttribute("GoldValue"), _G.GoldCE or Color3.fromRGB(255,255), 20, "GoldESP")
end
end
end
GoldESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "GoldPile" then
if not v:FindFirstChild("GoldESP") then
LibraryESP:AddESP(v, "Gold " .. v:GetAttribute("GoldValue"), _G.GoldCE or Color3.fromRGB(255,255), 20, "GoldESP")
end
end
end)
else
GoldESP:Disconnect()
LibraryESP:Delete("GoldESP")
end
end}):AddColorPicker("GoldESP",{
Default = Color3.fromRGB(255,255),
Callback = function(v)
_G.GoldCE = v
end})
ESP:AddToggle("ChestESP",{
Text = "Chest ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "ChestBox" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Chest", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "ChestBoxLocked" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Chest [Locked]", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "Chest_Vine" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Chest", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "Toolbox_Locked" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Toolbox [Locked]", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "Toolbox" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Toolbox", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
end
end
ChestESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "ChestBox" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Chest", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "ChestBoxLocked" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Chest [Locked]", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "Chest_Vine" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Chest", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "Toolbox_Locked" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Toolbox [Locked]", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
elseif v.Name == "Toolbox" then
if not v:FindFirstChild("ChestESP") then
LibraryESP:AddESP(v, "Toolbox", _G.ChestCE or Color3.fromRGB(255,135), 20, "GoldESP")
end
end
end)
else
ChestESP:Disconnect()
LibraryESP:Delete("ChestESP")
end
end}):AddColorPicker("ChestESP",{
Default = Color3.fromRGB(255,135),
Callback = function(v)
_G.ChestCE = v
end})
ESP:AddToggle("WaterPumpESP",{
Text = "Waterpump ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "WaterPump" then
if not v:FindFirstChild("PumpESP") then
LibraryESP:AddESP(v, "Waterpump", _G.PumpCE or Color3.fromRGB(0,255,255), 20, "PumpESP")
end
end
end
PumpESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "WaterPump" then
if not v:FindFirstChild("PumpESP") then
LibraryESP:AddESP(v, "Waterpump", _G.PumpCE or Color3.fromRGB(0,255,255), 20, "PumpESP")
end
end
end)
else
PumpESP:Disconnect()
LibraryESP:Delete("PumpESP")
end
end}):AddColorPicker("PumpESP",{
Default = Color3.fromRGB(0,255,255),
Callback = function(v)
_G.PumpCE = v
end})
ESP:AddToggle("EntityESP",{
Text = "Entity ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "RushMoving" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Rush", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "AmbushMoving" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Ambush", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Parent.Name == "Eyes" and v.Name == "Core" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Eyes", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v.Parent:FindFirstChild("Core"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "BackdoorRush" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Blitz", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "BackdoorLookman" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Lookman", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "A60" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "A60", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "A120" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "A120", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "GlitchAmbush" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "AR0xMBUSH", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "GlitchRush" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "RNIUSHCg==", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "Grumbo" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Grumble", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "ScaryWall" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v.Wall, "Seek Wall", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "FigureRagdoll" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Figure", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "FigureRig" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Figure", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "JeffTheKiller" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Jeff", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "Sally" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Sally", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
end
end
EntityESP = workspace.DescendantAdded:Connect(function(v)
if v.Name == "RushMoving" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Rush", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "AmbushMoving" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Ambush", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Parent.Name == "Eyes" and v.Name == "Core" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Eyes", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v.Parent:FindFirstChild("Core"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "BackdoorRush" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Blitz", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "BackdoorLookman" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Lookman", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "A60" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "A60", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "A120" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "A120", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "GlitchAmbush" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "AR0xMBUSH", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "GlitchRush" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "RNIUSHCg==", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
CylinderESP(v:FindFirstChildOfClass("Part"), _G.EntityCE or Color3.fromRGB(255), "EntityESP")
end
elseif v.Name == "Grumbo" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Grumble", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "ScaryWall" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v.Wall, "Seek Wall", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "FigureRagdoll" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Figure", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "FigureRig" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Figure", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "JeffTheKiller" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Jeff", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
elseif v.Name == "Sally" then
if not v:FindFirstChild("EntityESP") then
LibraryESP:AddESP(v, "Sally", _G.EntityCE or Color3.fromRGB(255), 20, "EntityESP")
end
end
end)
else
EntityESP:Disconnect()
LibraryESP:Delete("EntityESP")
end
end}):AddColorPicker("EntityESP",{
Default = Color3.fromRGB(255),
Callback = function(v)
_G.EntityCE = v
end})
ESP:AddToggle("ItemsESP",{
Text = "Items ESP",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v:IsA("Model") then
if v.Name == "StarJug" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Star Jug", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "StarBottle" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Star Bottle", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "AlarmClock" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Alarm Clock", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "StarVial" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Star Vial", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "GweenSoda" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Gween Soda", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Bread" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bread", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Cheese" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Cheese", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "BandagePack" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bandage Pack", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "BatteryPack" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Battery Pack", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "LaserPointer" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Laser pointer", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Glowsticks" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Glowstick", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Smoothie" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Smoothie", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Straplight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Straplight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Bulklight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bulklight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Lighter" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Lighter", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Lockpick" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Lockpick", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Vitamins" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Vitamin", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Crucifix" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Crucifix", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "CrucifixWall" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Crucifix", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "SkeletonKey" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Skeleton Key", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "GweenSoda" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Gween Soda", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Flashlight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Flashlight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Candle" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Candle", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Shears" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shears", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Battery" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Battery", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Bandage" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bandage", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "PickupItem" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Paper", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Shakelight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shakelight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Scanner" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "NVCS-3000", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "ShieldMini" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shield Vial", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "ShieldBig" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shield Big", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "HolyGrenade" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Holy Hand Grenade", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
end
end
end
ItemsESP = workspace.DescendantAdded:Connect(function(v)
if v:IsA("Model") then
if v.Name == "StarJug" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Star Jug", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "StarBottle" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Star Bottle", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "AlarmClock" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Alarm Clock", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "StarVial" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Star Vial", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "GweenSoda" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Gween Soda", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Bread" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bread", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Cheese" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Cheese", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "BandagePack" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bandage Pack", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "BatteryPack" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Battery Pack", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "LaserPointer" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Laser pointer", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Glowsticks" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Glowstick", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Smoothie" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Smoothie", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Straplight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Straplight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Bulklight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bulklight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Lighter" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Lighter", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Lockpick" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Lockpick", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Vitamins" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Vitamin", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Crucifix" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Crucifix", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "CrucifixWall" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Crucifix", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "SkeletonKey" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Skeleton Key", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "GweenSoda" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Gween Soda", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Flashlight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Flashlight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Candle" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Candle", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Shears" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shears", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Battery" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Battery", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Bandage" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Bandage", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "PickupItem" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Paper", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Shakelight" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shakelight", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "Scanner" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "NVCS-3000", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "ShieldMini" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shield Vial", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "ShieldBig" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Shield Big", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
elseif v.Name == "HolyGrenade" then
if not v:FindFirstChild("ItemsESP") then
LibraryESP:AddESP(v, "Holy Hand Grenade", _G.ItemsCE or Color3.fromRGB(255,0,255), 20, "ItemsESP")
end
end
end
end)
else
ItemsESP:Disconnect()
LibraryESP:Delete("ItemsESP")
end
end}):AddColorPicker("ItemsESP",{
Default = Color3.fromRGB(255,0,255),
Callback = function(v)
_G.ItemsCE = v
end})

ESP:AddDivider()
ESP:AddToggle("DistanceESP",{
Text = "Distance ESP",
Default = false,
Callback = function(v)
getgenv().DistanceESP = v
end})
ESP:AddToggle("RainbowESP",{
Text = "Rainbow ESP",
Default = false,
Callback = function(v)
getgenv().RainbowESP = v
end})


local Notifying = Tabs.Visual:AddRightGroupbox("Notifying")
Notifying:AddDropdown('SelectEntity',{
	Text = "Select Entity",
        Values = {'Rush', 'Ambush', 'Blitz', 'A60', 'A120', 'Lookman', 'Eyes', 'Seek Chase', 'JeffTheKiller', 'Sally', 'Halt', 'AR0xMBUSH', 'RNIUSHCg==', 'Gloombat Swarm'},
	Default = 0,
	Multi = true
})
_G.PlaySoundAlert = 5
Notifying:AddToggle("EntityNotify",{
Text = "Entity Notify",
Default = false,
Callback = function(v)
if v then
local Entity = {"SeekMovingNewClone","SeekMoving","GlitchAmbush","GlitchRush","BackdoorLookman","BackdoorRush","GloombatSwarm","Eyes","JeffTheKiller","RushMoving","AmbushMoving","A60","A120"}
NotificationEntity = workspace.ChildAdded:Connect(function(v)
if table.find(Entity,v.Name) then
repeat task.wait() until game.Players.LocalPlayer:DistanceFromCharacter(v:GetPivot().Position) < 750 or not v:IsDescendantOf(workspace)
if v:IsDescendantOf(workspace) then
if Options.SelectEntity.Value["Rush"] and v.Name == "RushMoving" then
Library:Notify("ENTITIES | Rush has spawn, find hiding place and hide now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Rush has spawn!")
end
elseif Options.SelectEntity.Value["Ambush"] and v.Name == "AmbushMoving" then
Library:Notify("ENTITIES | Ambush has spawn, find hiding place and hide now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Ambush has spawn!")
end
elseif Options.SelectEntity.Value["Blitz"] and v.Name == "BackdoorRush" then
Library:Notify("ENTITIES | Blitz has spawn, find hiding place and hide now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Blitz has spawn!")
end
elseif Options.SelectEntity.Value["A60"] and v.Name == "A60" then
Library:Notify("ENTITIES | A60 has spawn, find hiding place and hide now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] A60 has spawn!")
end
elseif Options.SelectEntity.Value["A120"] and v.Name == "A120" then
Library:Notify("ENTITIES | A120 has spawn, find hiding place and hide now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] A120 has spawn!")
end
elseif Options.SelectEntity.Value["Lookman"] and v.Name == "BackdoorLookman" then
Library:Notify("ENTITIES | Lookman has spawn, dont look at it!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Lookman has spawn!")
end
elseif Options.SelectEntity.Value["Eyes"] and v.Name == "Eyes" then
Library:Notify("ENTITIES | Eyes has spawn, dont look at it!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Eyes has spawn!")
end
elseif Options.SelectEntity.Value["Seek Chase"] and v.Name == "SeekMoving" or v.Name == "SeekMovingNewClone" then
Library:Notify("ENTITIES | Seek has spawn, goodluck for chase!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Seek Chase goodluck!")
end
elseif Options.SelectEntity.Value["JeffTheKiller"] and v.Name == "JeffTheKiller" then
Library:Notify("ENTITIES | Jeff The Killer has spawn, careful with knife it!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Jeff The Killer has spawn!")
end
elseif Options.SelectEntity.Value["Sally"] and v.Name == "Window_BrokenSally" then
Library:Notify("ENTITIES | Sally has spawn, in broken window!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Sally has spawn!")
end
elseif Options.SelectEntity.Value["Halt"] and v.Name == "HaltHallway" then
Library:Notify("ENTITIES | Halt has spawn, it in next door!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Halt Room has spawn!")
end
elseif Options.SelectEntity.Value["AR0xMBUSH"] and v.Name == "GlitchAmbush" then
Library:Notify("ENTITIES | AR0xMBUSH has spawn, find hiding place and hide now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif Options.SelectEntity.Value["RNIUSHCg=="] and v.Name == "GlitchRush" then
Library:Notify("ENTITIES | RNIUSHCg== has spawn, find hiding place and hide now!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
elseif Options.SelectEntity.Value["Gloombat Swarm"] and v.Name == "GloombatSwarm" then
Library:Notify("ENTITIES | Gloombat Swarm has spawn!")
if _G.SoundAlert then
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySoundAlert
Sound.PlayOnRemove = true
Sound:Destroy()
end
if _G.PlayChatAlert then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("[Alert] Gloombat Swarm has spawn!")
end
end
end
end
end)
else
NotificationEntity:Disconnect()
end
end})
Notifying:AddToggle("OxyNotify",{
Text = "Oxygen Notify",
Default = false,
Callback = function(v)
_G.OxygenNotify = v
if v then
OxygenNotify = game.Players.LocalPlayer.Character:GetAttributeChangedSignal("Oxygen"):Connect(function()
if game.Players.LocalPlayer.Character:GetAttribute("Oxygen") < 100 and _G.OxygenNotify then
firesignal(RemotesFolder.Caption.OnClientEvent, string.format("Oxygen: %.1f", game.Players.LocalPlayer.Character:GetAttribute("Oxygen")))
end
end)
else
OxygenNotify:Disconnect()
end
end})
Notifying:AddToggle("PlaySound",{
Text = "Playing Sound",
Default = false,
Callback = function(v)
_G.SoundAlert = v
end})
Notifying:AddSlider("VolumeSound",{
Text = "Volume",
Min = 5,
Default = 5,
Max = 10,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.PlaySoundAlert = v
end})


local LightingTabbox = Tabs.Visual:AddRightTabbox()
local Lighting = LightingTabbox:AddTab("Lighting")
Lighting:AddSlider("Brightness",{
Text = "Brightness",
Min = 1,
Default = 1,
Max = 3,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.Brightness = v
end})
Lighting:AddToggle("GlobalShadows",{
Text = "No Shadows",
Default = false,
Callback = function(v)
_G.GlobalShadows = v
end})
Lighting:AddToggle("NoFog",{
Text = "No Fog",
Default = false,
Callback = function(v)
_G.NoFog = v
end})
Lighting:AddDivider()
Lighting:AddToggle("Fullbright",{
Text = "Enabled",
Default = false,
Callback = function(v)
_G.Fullbright = v
task.spawn(function()
pcall(function()
if _G.Fullbright then
if not game.Lighting:GetAttribute("FogStart") then game.Lighting:SetAttribute("FogStart", game.Lighting.FogStart) end
if not game.Lighting:GetAttribute("FogEnd") then game.Lighting:SetAttribute("FogEnd", game.Lighting.FogEnd) end
game.Lighting.FogStart = _G.NoFog and 0 or game.Lighting:GetAttribute("FogStart")
game.Lighting.FogEnd = _G.NoFog and math.huge or game.Lighting:GetAttribute("FogEnd")
local fog = game.Lighting:FindFirstChildOfClass("Atmosphere")
if fog then
if not fog:GetAttribute("Density") then fog:SetAttribute("Density", fog.Density) end
fog.Density = _G.NoFog and 0 or fog:GetAttribute("Density")
end
end
end)
end)
game:GetService("RunService").RenderStepped:Connect(function()
if _G.Fullbright then
game.Lighting.OutdoorAmbient = Color3.new(1,1,1)
game.Lighting.Brightness = _G.Brightness or 1
game.Lighting.GlobalShadows = not _G.GlobalShadows
else
game.Lighting.OutdoorAmbient = Color3.fromRGB(55,55,55)
game.Lighting.Brightness = 0
game.Lighting.GlobalShadows = true
end
end)
end})
local Ambient = LightingTabbox:AddTab("Ambient")
Ambient:AddDropdown('SelectHeadLight',{
	Text = "Head Light",
        Values = {'Curious', 'Modifiers', 'Guidance'},
	Default = 0,
        Multi = false,
        Callback = function(v)
_G.HeadLightSelect = v
end})
Ambient:AddSlider("HeadBrightness",{
Text = "Brightness",
Min = 1,
Default = 1,
Max = 3,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.HeadBrightness = v
end})
Ambient:AddSlider("Range",{
Text = "Range",
Min = 1,
Default = 1,
Max = 60,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.RangeLightHead = v
end})
Ambient:AddToggle("EnabledHeadLight",{
Text = "Enabled",
Default = false,
Callback = function(v)
_G.EnabledLightHead = v
game:GetService("RunService").RenderStepped:Connect(function()
if Options.SelectHeadLight.Value["Curious"] and _G.EnabledLightHead then
if game.Players.LocalPlayer.Character:FinFirstChild("Head") then
game.Players.LocalPlayer.Character.Head.PointLight.Enabled = _G.EnabledLightHead
game.Players.LocalPlayer.Character.Head.PointLight.Range = _G.RangeLightHead or 60
game.Players.LocalPlayer.Character.Head.PointLight.Color = Color3.new(1,1,0)
game.Players.LocalPlayer.Character.Head.PointLight.Brightness = _G.HeadBrightness or 1
end
end
if Options.SelectHeadLight.Value["Modifiers"] and _G.EnabledLightHead then
if game.Players.LocalPlayer.Character:FinFirstChild("Head") then
game.Players.LocalPlayer.Character.Head.PointLight.Enabled = _G.EnabledLightHead
game.Players.LocalPlayer.Character.Head.PointLight.Range = _G.RangeLightHead or 60
game.Players.LocalPlayer.Character.Head.PointLight.Color = Color3.new(1,1,0)
game.Players.LocalPlayer.Character.Head.PointLight.Brightness = _G.HeadBrightness or 1
end
end
if Options.SelectHeadLight.Value["Guidance"] and _G.EnabledLightHead then
if game.Players.LocalPlayer.Character:FinFirstChild("Head") then
game.Players.LocalPlayer.Character.Head.PointLight.Enabled = _G.EnabledLightHead
game.Players.LocalPlayer.Character.Head.PointLight.Range = _G.RangeLightHead or 60
game.Players.LocalPlayer.Character.Head.PointLight.Color = Color3.new(1,1,0)
game.Players.LocalPlayer.Character.Head.PointLight.Brightness = _G.HeadBrightness or 1
end
end
end)
end})



local Camera = Tabs.Visual:AddRightGroupbox("Camera")
Camera:AddSlider("SelectFOV",{
Text = "Field Of View",
Min = 70,
Default = 70,
Max = 120,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.SelectFieldOfView = v
end})
Camera:AddToggle("FOV",{
Text = "Field Of View",
Default = false,
Callback = function(v)
_G.FieldOfView = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.FieldOfView then
workspace.CurrentCamera.FieldOfView = _G.SelectFieldOfView or 70
else
workspace.CurrentCamera.FieldOfView = 70
end
end)
end})
Camera:AddToggle("NoCamBob",{
Text = "No Camera Bob",
Default = false,
Callback = function(v)
_G.NoCamBob = v
game:GetService("RunService").RenderStepped:Connect(function()
Main_Game.spring.Speed = _G.NoCamBob and 9e9 or 8
end)
end})
Camera:AddToggle("NoCamShake",{
Text = "No Camera Shake",
Default = false,
Callback = function(v)
_G.NoCamShake = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.NoCamShake then
Main_Game.csgo = CFrame.new()
end
end)
end})
Camera:AddDivider()
Camera:AddToggle("Viewmodel",{
Text = "Viewmodel",
Default = false,
Callback = function(v)
_G.Viewmodel = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.Viewmodel then
Main_Game.tooloffset = Vector3.new(_G.ViewmodelX, _G.ViewmodelY, _G.ViewmodelZ)
else
Main_Game.tooloffset = Vector3.new(0,0,0)
end
end)
end})
Camera:AddSlider("SelectViewmodelX",{
Text = "X",
Min = -5,
Default = 0,
Max = 5,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.ViewmodelX = v
end})
Camera:AddSlider("SelectViewmodelY",{
Text = "Y",
Min = -5,
Default = 0,
Max = 5,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.ViewmodelY = v
end})
Camera:AddSlider("SelectViewmodelZ",{
Text = "Z",
Min = -5,
Default = 0,
Max = 5,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.ViewmodelZ = v
end})
local MenuGroup = Tabs.Settings:AddLeftGroupbox("Menu")
local CreditsGroup = Tabs.Settings:AddRightGroupbox("Credits")

MenuGroup:AddToggle("KeybindMenuOpen", { Default = false, Text = "Open Keybind Menu", Callback = function(v) Library.KeybindFrame.Visible = v end})
MenuGroup:AddToggle("ShowCustomCursor", {Text = "Custom Cursor", Default = true, Callback = function(v) Library.ShowCustomCursor = v end})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Keybind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
MenuGroup:AddButton("Unload", function() Library:Unload() end)

CreditsGroup:AddLabel("Developers:")
CreditsGroup:AddLabel("< Owner > | rechedmcvn")

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()

ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place") 

SaveManager:BuildConfigSection(Tabs.Settings)

ThemeManager:ApplyToTab(Tabs.Settings)
















































